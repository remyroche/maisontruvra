# This is an enhanced GitHub Actions workflow designed for collaboration.
# It first attempts to auto-fix and format the code, then generates a clean
# report of any remaining errors for manual review and fixing.

name: 'Ruff Auto-Fixer and Error Reporter'

on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  lint-fix-and-report:
    runs-on: ubuntu-latest
    
    # Add this permissions block to allow the action to commit changes
    permissions:
      contents: write

    steps:
      # Step 1: Check out the repository's code.
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Python.
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11' # You can change this to your project's Python version

      # Step 3: Install dependencies.
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff bandit
          if [ -f backend/requirements.txt ]; then pip install -r backend/requirements.txt; fi

      # Step 4: Run Ruff Formatter.
      - name: Format code with Ruff
        run: ruff format backend/

      # Step 5: Run Ruff Linter with auto-fix enabled.
      - name: Lint and fix with Ruff
        run: ruff check backend/ --fix --unsafe-fixes --exit-zero

      # Step 6: Commit any automated changes.
      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: Apply automated Ruff formatting and fixes"
          branch: ${{ github.head_ref }}
          commit_options: '--no-verify'
          repository: .
          commit_user_name: "GitHub Actions Bot"
          commit_user_email: "github-actions-bot@users.noreply.github.com"
          commit_author: "GitHub Actions Bot <github-actions-bot@users.noreply.github.com>"

      # Step 7: Generate a report of any remaining errors.
      # This step runs Ruff again without fixing, saving the output to a file.
      - name: Generate error report
        run: |
          ruff check backend/ > ruff-errors.txt || true
      
      # Step 8: Upload the error report as a build artifact.
      # This makes the report downloadable from the GitHub Actions summary page.
      - name: Upload error report artifact
        uses: actions/upload-artifact@v4
        with:
          name: ruff-error-report
          path: ruff-errors.txt

      # Step 9: Final check to fail the workflow if errors remain.
      # This ensures that the build status correctly reflects that manual action is needed.
      - name: Final check for errors
        run: |
          ruff check backend/
