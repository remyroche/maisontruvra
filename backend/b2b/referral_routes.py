
from flask import Blueprint, request, jsonify
from backend.auth.permissions import b2b_user_required
from flask_jwt_extended import get_jwt_identity
from backend.services.b2b_referral_service import B2BReferralService
from backend.services.exceptions import ServiceException

referral_routes = Blueprint('b2b_referral_routes', __name__)

@referral_routes.route('/referrals', methods=['POST'])
@b2b_user_required
def create_referral():
    """
    A B2B user refers another potential business.
    """
    user_id = get_jwt_identity()
    data = request.get_json()
    
    try:
        referral = B2BReferralService.create_referral(user_id, data)
        return jsonify(referral.to_dict()), 201
    except ServiceException as e:
        return jsonify({"error": str(e)}), 400

@b2b_bp.route('/referrals', methods=['GET'])
@b2b_user_required
def get_referral_details():
    """
    Returns a list of users referred by the current B2B user and the
    total points each referred user has generated for them.
    """
    user_id = get_jwt_identity()

    conn = db.get_connection()
    cursor = conn.cursor(dictionary=True)
    try:
        # This query finds all users referred by the current user (the referrer)
        # and calculates the points generated by each referee's spending.
        # The points logic is: 0.1 point for every 1 euro spent by the referee.
        cursor.execute(
            """
            SELECT
                referee.id as referee_id,
                referee.name as referee_name,
                referee.email as referee_email,
                COALESCE(SUM(o.total) * 0.1, 0) as points_generated
            FROM users referrer
            JOIN users referee ON referrer.id = referee.referrer_id
            LEFT JOIN orders o ON referee.id = o.user_id AND o.status IN ('delivered', 'shipped')
            WHERE referrer.id = %s
            GROUP BY referee.id, referee.name, referee.email
            """,
            (user_id,)
        )
        referrals = cursor.fetchall()

        return jsonify(referrals), 200

    except Exception as e:
        logger.error(f"Error fetching referral details for B2B user {user_id}: {e}")
        return jsonify({"error": "An internal error occurred."}), 500
    finally:
        cursor.close()
        conn.close()
        
@referral_routes.route('/referrals', methods=['GET'])
@b2b_user_required
def get_my_referrals():
    """
    Get the status of all referrals made by the logged-in B2B user.
    """
    user_id = get_jwt_identity()
    try:
        referrals = B2BReferralService.get_referrals_by_user(user_id)
        return jsonify([r.to_dict() for r in referrals]), 200
    except ServiceException as e:
        return jsonify({"error": str(e)}), 500
